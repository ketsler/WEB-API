#!/usr/bin/env node
/****************************************************************************
 The MIT License (MIT)

 Copyright (c) 2014 Apigee Corporation

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
'use strict';

var cli = require('../lib/util/cli');
var execute = cli.execute;
var app = require('commander');
var account = require('../lib/commands/account/account');

app
  .command('create <account>')
  .option('-p, --provider <provider>', 'name of provider')
  .option('-b, --baseuri <baseuri>', 'base uri')
  .option('-o, --organization <organization>', 'organization')
  .option('-u, --username <username>', 'username')
  .option('-w, --password <password>', 'password')
  .option('-e, --environment <environment>', 'environment')
  .option('-v, --virtualhosts <virtualhosts>', 'virtual hosts')
  .option('-n, --noservice', 'no create service prompt')
  .description('Create a new deployment account')
  .action(execute(account.create));

app
  .command('delete [account]')
  .description('Delete an deployment account')
  .action(execute(account.delete));

app
  .command('select [account]')
  .description('Select an deployment account')
  .action(execute(account.select));

app
  .command('show [account]')
  .option('-a, --account <account>', 'name of account')
  .description('Show a deployment account (name is optional - default shows current)')
  .action(execute(account.show, 'Account'));

app
  .command('update [account]')
  .description('Update a deployment account')
  .action(execute(account.update));

app
  .command('setValue <key> <value>')
  .option('-a, --account <account>', 'name of account')
  .description('Set a value on the account')
  .action(execute(account.setValue));

app
  .command('deleteValue <key>')
  .option('-a, --account <account>', 'name of account')
  .description('Delete a value from the account')
  .action(execute(account.deleteValue));

app
  .command('list')
  .alias('ls')
  .description('List deployment accounts')
  .action(execute(account.list, 'Accounts'));

app
  .command('providers')
  .description('List available providers')
  .action(execute(account.providers, 'Providers'));

//app
//  .command('service-types [account]')
//  .description('List services types available to create for an Account')
//  .action(execute(account.services, 'Services'));
//
//app
//  .command('services [account]')
//  .description('List services created on this account')
//  .action(execute(account.services, 'Services'));
//

// todo: how to handle provider-specific extensions like this?
app
  .command('deployments [account]')
  .option('-a, --account <account>', 'name of account')
  .option('-l, --long', 'long format (includes URIs)')
  .description('List deployments')
  .action(execute(account.deployments, 'Deployments'));

app.parse(process.argv);

cli.validate(app);
